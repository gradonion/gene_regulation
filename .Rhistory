plot(State_var$beta[,1]/State_var$alpha[,1], type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[,i]/State_var$alpha[,i], col = i)
}
plot(State_var$beta[,2]/State_var$alpha[,2], type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
seq(2,10,2)/seq(5,1,-1)
plot(State_var$beta[,1]/State_var$alpha[,1], ylim = c(0,10),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[,i]/State_var$alpha[,i], col = i)
}
plot(State_var$beta[,1]/State_var$alpha[,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[,i]/State_var$alpha[,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=800,y=3.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
Est_Pi = matrix(nrow = niter, ncol = K)
for (j in 1:niter){
Est_Pi[j,1] = State_V$b1[j,1]/(State_V$b1[j,1]+State_V$b2[j,1])
for (k in 2:(K-1)){
Est_Pi[j,k] = (1-sum(Est_Pi[j,1:(k-1)])) * State_V$b1[j,k]/(State_V$b1[j,k]+State_V$b2[j,k])
}
Est_Pi[j,K] = 1-sum(Est_Pi[j,1:(K-1)])
}
plot(Est_Pi[,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,niter),y=rep(0,2),lty=2,col="pink")
legend(x=800,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
?runiform
?runif
runif(5,-20,20)
source('~/Downloads/Mengjie/Gibbs_practice/1D_gaussian_mixture_VB.R')
plot(State_mu$mean[,1],type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
plot(State_mu$mean[,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=2500,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
plot(State_var$beta[,1]/State_var$alpha[,1], ylim = c(0,5),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[,i]/State_var$alpha[,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
plot(State_var$beta[,1]/State_var$alpha[,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[,i]/State_var$alpha[,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=2500,y=3,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
Est_Pi = matrix(nrow = niter, ncol = K)
for (j in 1:niter){
Est_Pi[j,1] = State_V$b1[j,1]/(State_V$b1[j,1]+State_V$b2[j,1])
for (k in 2:(K-1)){
Est_Pi[j,k] = (1-sum(Est_Pi[j,1:(k-1)])) * State_V$b1[j,k]/(State_V$b1[j,k]+State_V$b2[j,k])
}
Est_Pi[j,K] = 1-sum(Est_Pi[j,1:(K-1)])
}
Est_Pi[1:3,]
plot(Est_Pi[,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,niter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,niter),y=rep(0,2),lty=2,col="pink")
legend(x=2500,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
plot(State_mu$mean[,3],type="l")
# Plotting
iter = 1000
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=850,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
# Plotting
iter = 500
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=400,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
mtext("random initialization: q_mu (mean = runif(5,-20,20), var = runif(5,1,10))")
iter = 500
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_q(mu)_mean_3mixture.pdf",
width = 8, height = 6)
# png(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_q(mu)_mean_3mixture.png",
#     pointsize = 20, width = 800, height = 600)
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=400,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
mtext("random initialization: q(mu) ~ mean = runif(5,-20,20), var = runif(5,1,10)")
dev.off()
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=400,y=3,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
legend(x=430,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ alpha = runif(5,1,5), beta = runif(5,1,10)")
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_q(var)_mean_3mixture.pdf",
width = 8, height = 6)
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ alpha = runif(5,1,5), beta = runif(5,1,10)")
dev.off()
lot(Est_Pi[1:iter,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,1:iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
plot(Est_Pi[1:iter,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,1:iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ alpha = runif(5,1,5), beta = runif(5,1,10)")
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
plot(Est_Pi[1:iter,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
plot(Est_Pi[1:iter,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(V) ~ Beta(b1=runif(5,1,5), b2=runif(5,2,10))")
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_pi_3mixture.pdf",
width = 8, height = 6)
plot(Est_Pi[1:iter,1],ylim = c(0, 0.5),type="l", xlab = "time step", ylab = "cluster pi_s",
main = "Trajectory of Estimated Cluster Probabilities")
for (i in 2:K){
lines(Est_Pi[1:iter,i], col = i)
}
for (j in 1:length(exp_pi)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_pi[j],2),lty=2,col="pink")
}
lines(x=c(0,iter),y=rep(0,2),lty=2,col="pink")
legend(x=450,y=0.48,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(V) ~ Beta(b1=runif(5,1,5), b2=runif(5,2,10))")
dev.off()
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ InvGamma(alpha = runif(5,1,5), beta = runif(5,1,10))")
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_q(var)_mean_3mixture.pdf",
width = 8, height = 6)
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "cluster variances",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ InvGamma(alpha = runif(5,1,5), beta = runif(5,1,10))")
dev.off()
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=450,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
mtext("random initialization: q(mu) ~ N(mean = runif(5,-20,20), var = runif(5,1,10))")
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_q(mu)_mean_3mixture.pdf",
width = 8, height = 6)
# png(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_q(mu)_mean_3mixture.png",
#     pointsize = 20, width = 800, height = 600)
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=450,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
mtext("random initialization: q(mu) ~ N(mean = runif(5,-20,20), var = runif(5,1,10))")
dev.off()
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/VB_rand_q(var)_mean_3mixture.pdf",
width = 8, height = 6)
plot(State_var$beta[1:iter,1]/State_var$alpha[1:iter,1], ylim = c(0,3),
type="l", xlab = "time step", ylab = "q(var) means",
main = "Trajectory of q(var) means (VB)")
for (i in 2:K){
lines(State_var$beta[1:iter,i]/State_var$alpha[1:iter,i], col = i)
}
for (j in 1:length(exp_sd)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_sd[j]^2,2),lty=2,col="pink")
}
legend(x=450,y=2.1,legend = c(1:5),col = c(1:5), lty = 1, cex = 0.8)
mtext("random initialization: q(var) ~ InvGamma(alpha = runif(5,1,5), beta = runif(5,1,10))")
dev.off()
source('~/Downloads/Mengjie/Gibbs_practice/1D_gaussian_mixture_VB.R')
source('~/Downloads/Mengjie/Gibbs_practice/1D_gaussian_mixture_VB.R')
## Simulation:
set.seed(33)
tmp = mix_gen(N,exp_pi,exp_mu,exp_sd)
Y = tmp[[1]]
hist(Y,freq = F)
hist(X,freq = F)
source('~/Downloads/Mengjie/Gibbs_practice/1D_gaussian_mixture_VB.R')
# Plotting
iter = niter
plot(State_mu$mean[1:iter,1],ylim = c(-15, 15),type="l", xlab = "time step", ylab = "q(mu) means",
main = "Trajectory of q(mu) means (VB)")
for (i in 2:K){
lines(State_mu$mean[1:iter,i], col = i)
}
for (j in 1:length(exp_mu)){ # plot the expected values
lines(x=c(0,iter),y=rep(exp_mu[j],2),lty=2,col="pink")
}
legend(x=450,y=15,legend = 1:5,col = 1:5, lty = 1, cex = 0.8)
plot(State_mu$mean[1:iter,4],ylim = c(-15, 15),type="l")
## Simulation:
set.seed(100)
sample = mix_gen(N,exp_pi,exp_mu,exp_sd) ## This returns N sample data points and their cluster indices.
X = sample[[1]]
hist(X,freq = F)
mtext("set.seed(100), N=5000, pi=c(0.3,0.5,0.2), mu=c(-5,0,5), sd=c(1.5,1,0.5)")
pdf(file="~/Downloads/Mengjie/Gibbs_practice/Figs_1D_gaussian/hist_3mixture_seed100.pdf",
width = 8, height = 6)
hist(X,freq = F)
mtext("set.seed(100), N=5000, pi=c(0.3,0.5,0.2), mu=c(-5,0,5), sd=c(1.5,1,0.5)")
dev.off()
## 0.001 ps per step, 500 million steps, 500ns
nstep = 5000
set.seed(100)
x = rep(0,nstep)
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.003) + g
}
plot(x,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 500000
set.seed(100)
x = rep(0,nstep)
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.003) + g
}
plot(x,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 5000000
set.seed(100)
x = rep(0,nstep)
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.003) + g
}
plot(x,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
pos = seq(-6,6,0.1)
plot(pos, 0.001*pos^4-0.05*pos^2+0.03*pos, type = "l",main = "Function of Potential of Mean Force",
xlab = "x (Å)", ylab = "W(x) (kcal/mol)")
pos = seq(-7,7,0.1)
plot(pos, 0.001*pos^4-0.05*pos^2+0.03*pos, type = "l",main = "Function of Potential of Mean Force",
xlab = "x (Å)", ylab = "W(x) (kcal/mol)")
pos = seq(-7.5,7,0.1)
plot(pos, 0.001*pos^4-0.05*pos^2+0.03*pos, type = "l",main = "Function of Potential of Mean Force",
xlab = "x (Å)", ylab = "W(x) (kcal/mol)")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 5000000
set.seed(100)
x = rep(0,nstep)
n_ab = 0
n_ba = 0
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.003) + g
if (x[i+1]>0.301092 & x[i]<0.301092){
n_ab = n_ab + 1
} else if (x[i+1]<0.301092 & x[i]>0.301092){
n_ba = n_ba + 1
}
}
print(n_ab)
print(n_ba)
plot(x,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
hist(x, freq = F)
min(x)
max(x)
hist(x, freq = F)
pos = seq(-9,9.5,0.1)
lines(pos,exp(-(0.001*pos^4-0.05*pos^2+0.03*pos)/0.5915), lty = 2, col = "red")
hist(x, freq = F)
pos = seq(-9,9.5,0.1)
lines(pos,exp(-(0.001*pos^4-0.05*pos^2+0.03*pos)/0.5915)/28.4823, lty = 2, col = "red")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 10000000
set.seed(100)
x = rep(0,nstep)
n_ab = 0
n_ba = 0
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.03) + g
if (x[i+1]>0.301092 & x[i]<0.301092){
n_ab = n_ab + 1
} else if (x[i+1]<0.301092 & x[i]>0.301092){
n_ba = n_ba + 1
}
}
print(n_ab)
print(n_ba)
plot(x,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
hist(x, freq = F)
pos = seq(-9,9.5,0.1)
lines(pos,exp(-(0.001*pos^4-0.05*pos^2+0.03*pos)/0.5915)/28.4823, lty = 2, col = "red")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 1000000
set.seed(100)
nsave = 500000
y = rep(0,nsave)
x = 0
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(0.0002)
x = x + 0.0001/0.5915 * (-0.004*(x^3)+0.1*x-0.03) + g
if (i>nstep-nsave){
y[i-(nstep-nsave)] = x
}
}
# for (i in 1:(nstep-1)){
#   g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(2*0.1*0.001)
#   x[i+1] = x[i] + 0.0001/0.5915 * (-0.004*(x[i]^3)+0.1*x[i]-0.03) + g
#   # if (x[i+1]>0.301092 & x[i]<0.301092){
#   #   n_ab = n_ab + 1
#   # } else if (x[i+1]<0.301092 & x[i]>0.301092){
#   #   n_ba = n_ba + 1
#   # }
# }
plot(y,type = "l",col="blue",xlab = "time step",main = "Brownian Dynamics Trajectory")
# hist(x, freq = F)
# pos = seq(-9,9.5,0.1)
# lines(pos,exp(-(0.001*pos^4-0.05*pos^2+0.03*pos)/0.5915)/28.4823, lty = 2, col = "red")
## 0.001 ps per step, 500 million steps, 500ns
nstep = 500000000
set.seed(100)
nsave = 500000
y = rep(0,nsave)
x = 0
for (i in 1:(nstep-1)){
g = sqrt(-2*log(runif(1))) * cos(2*pi*runif(1)) * sqrt(0.0002)
x = x + 0.0001/0.5915 * (-0.004*(x^3)+0.1*x-0.03) + g
if (i>nstep-nsave){
y[i-(nstep-nsave)] = x
}
}
save(y[495000:500000],"tmp.Rdata")
save(y[495000:500000],file = "tmp.Rdata")
save(y,"tmp.Rdata")
rm(list = "y")
PMF = function(x){
return(0.001*x^4-0.05*x^2+0.03*x)
}
x_L = -5.144
x_0 = 0.3011
x_R = 4.843
PMF(x_L)
PMF(x_0)
PMF(x_R)
x_L = -5.144
x_0 = 0.3011
x_R = 4.843
PMF(x_0) - PMF(x_L)
PMF(x_0) - PMF(x_R)
PMF_sec(x_L)
PMF = function(x){
return(0.001*x^4-0.05*x^2+0.03*x)
}
PMF_sec = function(x){
return(0.012*x^2-0.1)
}
x_L = -5.144
x_0 = 0.3011
x_R = 4.843
PMF(x_0) - PMF(x_L)
PMF(x_0) - PMF(x_R)
PMF_sec(x_L)
PMF_sec(x_0)
PMF_sec(x_R)
0.1/0.5915*exp(-0.7817/0.5915)*sqrt(0.09891*0.2175)/(2*pi)
0.1/0.5915*exp(-0.7817/0.5915)*sqrt(0.09891*0.2175)/(2*pi)
0.1/0.5915*exp(-0.4818/0.5915)*sqrt(0.09891*0.1815)/(2*pi)
2229/10^6
2229*2/10^6
2229*2/(2*10^6)
2229/(2*10^6)
source('~/Downloads/Benoit/BD_motion.R')
3.6*1000/1024
setwd("~/web")
rmarkdown::render_site('TFBS_chipseq.Rmd')
rmarkdown::render_site('index.Rmd')
